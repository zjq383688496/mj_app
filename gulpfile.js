'use strict';

var env = process.env.NODE_ENV || 'localhost';

var gulp        = require('gulp');
/* html */
var htmlmin     = require('gulp-htmlmin');		// html压缩
var replace     = require('gulp-replace');		// 替换
/* css */
var less        = require('gulp-less');			// less
var csso        = require('gulp-csso');			// css压缩
/* js */
var uglify      = require('gulp-uglify');		// js混淆
/* img */
//var imagemin    = require('gulp-imagemin');
/* 文件操作 */
var filter      = require('gulp-filter');		// 文件合并
var concat      = require('gulp-concat');		// 文件合并
var clean       = require('gulp-clean');		// 文件清除
var sourcemaps  = require('gulp-sourcemaps');	// sourcemaps生成
var rename      = require('gulp-rename');		// 文件重命名
/* 版本号管理 */
var rev         = require('gulp-rev');
var revReplace  = require('gulp-rev-replace');
/* server */
var browserSync = require('browser-sync');		// 浏览器同步
var nodemon     = require('gulp-nodemon');		// 自动部署
/* 工程相关 */
var gulpif      = require('gulp-if');			// 条件判断
var runSequence = require('gulp-sequence');		// 执行队列

// we'd need a slight delay to reload browsers
// connected to browser-sync after restarting nodemon
var BROWSER_SYNC_RELOAD_DELAY = 500;

gulp.task('nodemon', function(cb) {
	var called = false;
	return nodemon({

		// nodemon our expressjs server
		script: 'bin/www',
		env: {
			NODE_ENV: env
		},
		ext: '*',
		nodeArgs: ['--debug'] //install -g node-inspector //run node-inspector
			// watch core server file(s) that require server restart on change
			// watch: ['views','routes']
	})
	.on('start', function onStart() {
		// ensure start only got called once
		if (!called) {
			cb();
		}
		called = true;
	})
	.on('restart', function onRestart() {
		// reload connected browsers after a slight delay
		setTimeout(function reload() {
			browserSync.reload({ stream: false });
		}, BROWSER_SYNC_RELOAD_DELAY);
	});
});

gulp.task('browser-sync', function() {
	// for more browser-sync config options: http://www.browsersync.io/docs/options/
	browserSync.init({
		// watch the following files; changes will be injected (css & images) or cause browser to refresh
		files: ['public/**/*.*'],
		// informs browser-sync to proxy our expressjs app which would run at the following location
		proxy: 'http://localhost:3010',
		// informs browser-sync to use the following port for the proxied app
		// notice that the default port is 3000, which would clash with our expressjs
		port: 3000,
		// open the proxied app in chrome
		browser: 'default'
	});
});

gulp.task('default', ['build:localhost']);

/* 编译LESS */
gulp.task('less:dev', function() {
	var lessSrc = 'public/less/*.less';
	var cssDest = 'public/build/css';
	return gulp.src(lessSrc)
		.pipe(less())
		.pipe(csso())
		.pipe(rev())
		.pipe(gulp.dest(cssDest))
		.pipe(rev.manifest({
			base: 'public/build',
			merge: true
		}))
		.pipe(gulp.dest('build/assets'));
});

gulp.task('less:lo', function() {
	var lessSrc = 'public/less/*.less';
	var cssDest = 'public/css';
	return gulp.src(lessSrc)
		.pipe(sourcemaps.init({ loadMaps: true }))
		.pipe(less())
		.pipe(sourcemaps.write('/'))
		.pipe(gulp.dest(cssDest));
});

/* 复制业务js */
gulp.task('js', function() {
	var jsSrc  = 'public/js/*.js';
	var jsDest = 'public/build/js';
	gulp.src(jsSrc)
		.pipe(gulp.dest(jsDest));
});

/* 合并lib.js */
gulp.task('concat', function() {
	var p = 'public/js/lib/';
	var jsSrc  = [p+'jquery.js', p+'bootstrap.js', p+'MJJS.js', p+'common.js'];
	var jsDest = 'public/build/js';
	gulp.src(jsSrc)
		.pipe(concat('lib.js'))
		.pipe(gulp.dest(jsDest));
});

/* 压缩JS */
gulp.task('uglify', function() {
	var jsSrc  = 'public/build/js/*.js';
	var jsDest = 'public/build/js';
	return gulp.src(jsSrc)
		.pipe(rev())
		.pipe(uglify())
		.pipe(gulp.dest(jsDest))
		.pipe(rev.manifest({
			base: 'public/build',
			merge: true
		}))
		.pipe(gulp.dest('build/assets'));
});

gulp.task('util', function() {
	var jsSrc  = ['public/js/util/**/*'];
	var jsDest = 'public/build/js/util';
	return gulp.src(jsSrc)
		.pipe(gulp.dest(jsDest));
});

gulp.task('images', function() {
	return gulp.src('public/img/**/*')
		.pipe(rev())
		// .pipe(imagemin({
		//   optimizationLevel: 3,
		//   progressive: true,
		//   interlaced: true
		// }))
		.pipe(gulp.dest('public/build/img'))
		.pipe(rev.manifest({
			base: 'public/build',
			merge: true
		}))
		.pipe(gulp.dest('build/assets'));
});

/* 字体Copy */
gulp.task('fonts', function() {
	return gulp.src('public/fonts/**/*')
		.pipe(gulp.dest('public/build/fonts'));
});

gulp.task('revReplace', function() {
	var manifest = gulp.src('./rev-manifest.json');
	return gulp.src('views/**/*.hbs')
		.pipe(revReplace({
			manifest: manifest
		}))
		.pipe(rename({ extname: '.html' }))
		.pipe(htmlmin({
			includeAutoGeneratedTags: false,		// 自动插入闭合标签 (handlebars模板引擎必须为false)
			removeComments: true,					// 删除HTML注释
			//removeEmptyElements: true,			// 删除空白HTML标签
			removeEmptyAttributes: true,			// 删除所有空格作属性值 <input id="" /> ==> <input />
			removeScriptTypeAttributes: true,		// 删除<script>的type="text/javascript"
			removeStyleLinkTypeAttributes: true,	// 删除<style>和<link>的type="text/css"
			collapseWhitespace: true,				// 压缩HTML
			collapseBooleanAttributes: true,		// 省略布尔属性的值 <input checked="true"/> ==> <input />
			minifyJS: true,							// 压缩页面JS
			minifyCSS: true							// 压缩页面CSS
		}))
		.pipe(rename({ extname: '.hbs' }))
		.pipe(gulp.dest('views/build'));
});

gulp.task('build:localhost', function() {
	env = 'localhost';
	return runSequence(
		'clean:init',	// 初始化清除文件
		'less:lo',		// 编译less
		'clean:end',	// 结束清除文件
		'nodemon',		// 代码部署
		'browser-sync'
	)();
});

gulp.task('build:dev', function() {
	env = 'development';
	return runSequence(
		'clean:init',	// 初始化清除文件
		'concat',		// 合并js
		'js',			// 复制业务js
		'images',		// 复制图片
		'fonts',		// 复制字体
		'uglify',		// js压缩
		'less:dev',		// 编译less
		'util',			// 复制js组件
		'revReplace',	// 替换hbs
		'clean:end'		// 结束清除文件
	)();
});

gulp.task('clean:init', function () {
	return gulp.src(['views/build', 'public/build', 'public/css', 'public/dist', 'rev-manifest.json', 'public/**/*.map'], {read: false}).pipe(clean());
});

gulp.task('clean:end', function () {
	return gulp.src(['public/dist', 'rev-manifest.json'], {read: false}).pipe(clean());
});